{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","DialogItem","props","path","id","className","s","dialog","active","friendDialog","to","name","Message","dialogM","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","textarea","component","Textarea","validate","required","placeholder","button","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,kICGhSC,EAA6B,SAACC,GAAD,MAAY,CAC3CC,OAAQD,EAAME,KAAKD,S,mCCUNE,EAXI,SAACC,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACE,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACE,cAAC,IAAD,CAASH,UAAWC,IAAEG,aAAcC,GAAIP,EAAxC,SACGD,EAAMS,UCFAC,EAJC,SAACV,GACf,OAAO,qBAAKG,UAAWC,IAAEO,QAAlB,SAA4BX,EAAMY,W,iCCErCC,EAAcC,YAAiB,IAoBtBC,cAAU,CAAEC,KAAM,wBAAlBD,EAlBQ,SAACf,GACtB,OACE,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACE,8BACE,cAACC,EAAA,EAAD,CACEhB,UAAWC,IAAEgB,SACbC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBJ,KAAK,iBACLgB,YAAY,yBAGhB,8BACE,wBAAQtB,UAAWC,IAAEsB,OAArB,0BCWOC,EA1BC,SAAC3B,GACf,IAAIJ,EAAQI,EAAM4B,YACdC,EAAkBjC,EAAMkC,QAAQC,KAAI,SAACC,GACvC,OAAO,cAAC,EAAD,CAAYvB,KAAMuB,EAAEvB,KAAiBP,GAAI8B,EAAE9B,IAAZ8B,EAAE9B,OAGtC+B,EAAmBrC,EAAMsC,SAASH,KAAI,SAACI,GACzC,OAAO,cAAC,EAAD,CAASvB,QAASuB,EAAEvB,SAAcuB,EAAEjC,OAO7C,OACE,sBAAKC,UAAWC,IAAE0B,QAAlB,UACE,qBAAK3B,UAAWC,IAAEgC,aAAlB,SAAiCP,IAEjC,qBAAK1B,UAAWC,IAAE8B,SAAlB,SACE,8BAAMD,MAER,cAAC,EAAD,CAAgBhB,SAXA,SAACoB,GACnBrC,EAAMsC,YAAYD,EAAOE,uBCGdC,sBACbC,aAfoB,SAAC7C,GACrB,MAAO,CACLgC,YAAahC,EAAMgC,gBAIE,SAACc,GACxB,MAAO,CACLJ,YAAa,SAACC,GACZG,EAASC,YAAmBJ,ULPF,SAACK,GAAe,IACxCC,EADuC,uKAGzC,OAAKC,KAAK9C,MAAMH,OACT,cAAC+C,EAAD,eAAeE,KAAK9C,QADI,cAAC,IAAD,CAAUQ,GAAG,eAHH,GACbuC,IAAMH,WAUtC,OAHqCH,YAAQ9C,EAAR8C,CACnCI,KKGWL,CAGbb","file":"static/js/4.fb16b445.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__TSG_g\",\"dialogsItems\":\"Dialogs_dialogsItems__3DZ17\",\"active\":\"Dialogs_active__1SLPx\",\"messages\":\"Dialogs_messages__22XD2\",\"message\":\"Dialogs_message__1PVQo\",\"friendDialog\":\"Dialogs_friendDialog__2yc2G\",\"button\":\"Dialogs_button__rTsNz\",\"textarea\":\"Dialogs_textarea__3gIUF\"};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to=\"/login\" />;\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n    RedirectComponent\r\n  );\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n  let path = '/dialogs/' + props.id;\r\n  return (\r\n    <div className={s.dialog + ' ' + s.active}>\r\n      <NavLink className={s.friendDialog} to={path}>\r\n        {props.name}\r\n      </NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n  return <div className={s.dialogM}>{props.message}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          className={s.textarea}\r\n          component={Textarea}\r\n          validate={[required, maxLength50]}\r\n          name=\"newMessageBody\"\r\n          placeholder=\"Enter your message\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <button className={s.button}>Send</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nexport default reduxForm({ form: 'dialogAddMessageForm' })(AddMessageForm);\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport AddMessageForm from './AddMessageForm';\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n  let dialogsElements = state.dialogs.map((d) => {\r\n    return <DialogItem name={d.name} key={d.id} id={d.id} />;\r\n  });\r\n\r\n  let messagesElements = state.messages.map((m) => {\r\n    return <Message message={m.message} key={m.id} />;\r\n  });\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values.newMessageBody);\r\n  };\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>\r\n\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div>\r\n      </div>\r\n      <AddMessageForm onSubmit={addNewMessage} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { sendMessageCreator } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageBody) => {\r\n      dispatch(sendMessageCreator(newMessageBody));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}