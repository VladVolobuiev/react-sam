{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","s","button","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","contact","ProfileData","isOwner","goToEditMode","buttonEdit","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","target","files","length","initialValues","formData","then","Post","item","message","like","maxLength10","maxLengthCreator","MyPosts","React","memo","postsElements","posts","p","id","postsBlock","values","addPost","newPostText","AddNewPostForm","Field","textarea","name","component","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.bb5570de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3Te40\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3-U_n\",\"contact\":\"ProfileInfo_contact__3fHJx\",\"button\":\"ProfileInfo_button__249bb\",\"buttonEdit\":\"ProfileInfo_buttonEdit__2VLh_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__24_Vv\",\"posts\":\"MyPosts_posts__iVeHN\",\"button\":\"MyPosts_button__3GpoG\",\"textarea\":\"MyPosts_textarea__q9pIe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2LXlA\"};","import React, { useEffect, useState } from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n  return (\r\n    <div>\r\n      {!editMode && (\r\n        <div>\r\n          <b>Status: </b>\r\n          <span onDoubleClick={activateEditMode}>{props.status || '----'}</span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            autoFocus={true}\r\n            onChange={onStatusChange}\r\n            onBlur={deactivateEditMode}\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport { reduxForm } from 'redux-form';\r\nimport {\r\n  createField,\r\n  Input,\r\n  Textarea,\r\n} from '../../common/FormsControls/FormsControls';\r\nimport s from './ProfileInfo.module.css';\r\nimport style from './../../common/FormsControls/FormsControls.module.css';\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <button className={s.button}>save</button>\r\n      </div>\r\n      <div>\r\n        {error && <div className={style.formSummaryError}>{error}</div>}\r\n      </div>\r\n      <div>\r\n        <b> Full name: </b>\r\n        {createField('Full name', 'fullName', [], Input)}\r\n      </div>\r\n      <div>\r\n        <b> Looking for a job: </b>\r\n        {createField('', 'lookingForAJob', [], Input, { type: 'checkbox' })}\r\n      </div>\r\n\r\n      <div>\r\n        <b> My professional skills: </b>\r\n        {createField(\r\n          'My professional skills',\r\n          'lookingForAJobDescription',\r\n          [],\r\n          Textarea\r\n        )}\r\n      </div>\r\n\r\n      <div>\r\n        <b>About me:</b>\r\n\r\n        {createField('About me', 'aboutMe', [], Textarea)}\r\n      </div>\r\n      <div>\r\n        <b>Contacts:</b>\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <div key={key} className={s.contact}>\r\n              <d>{key}:</d>\r\n              {createField(key, 'contacts.' + key, [], Input)}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: 'edit-profile' })(\r\n  ProfileDataForm\r\n);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, { useState } from 'react';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n  const mainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n  const onSubmit = (formData) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      <div className={s.descriptionBlock}>\r\n        <img src={profile.photos.large || userPhoto} className={s.mainPhoto} />\r\n        <br />\r\n        {isOwner && <input type={'file'} onChange={mainPhotoSelected} />}\r\n        {editMode ? (\r\n          <ProfileDataForm\r\n            initialValues={profile}\r\n            onSubmit={onSubmit}\r\n            profile={profile}\r\n          />\r\n        ) : (\r\n          <ProfileData\r\n            profile={profile}\r\n            isOwner={isOwner}\r\n            goToEditMode={() => {\r\n              setEditMode(true);\r\n            }}\r\n          />\r\n        )}\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n  return (\r\n    <div>\r\n      {isOwner && (\r\n        <div>\r\n          <button className={s.buttonEdit} onClick={goToEditMode}>\r\n            edit\r\n          </button>\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b> Full name: </b>\r\n        {profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b> Looking for a job: </b>\r\n        {profile.lookingForAJob ? 'yes' : 'no'}\r\n      </div>\r\n      {profile.lookingForAJob && (\r\n        <div>\r\n          <b> My professional skills: </b>\r\n          {profile.lookingForAJobDescription}\r\n        </div>\r\n      )}\r\n      <div>\r\n        <b>About me:</b>\r\n        {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>Contacts:</b>\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <Contact\r\n              key={key}\r\n              contactTitle={key}\r\n              contactValue={profile.contacts[key]}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n  return (\r\n    <div className={s.contact}>\r\n      <b>{contactTitle}:</b>\r\n      {contactValue}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\nconst Post = (props) => {\r\n  return (\r\n    <div className={s.item}>\r\n      <img src=\"https://tiktok-wiki.ru/wp-content/uploads/2020/05/avatarki-dlya-tik-toka1.jpg\" />\r\n      {props.message}\r\n      <div>\r\n        <span>like {props.like}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport {\r\n  maxLengthCreator,\r\n  required,\r\n} from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\nconst MyPosts = React.memo((props) => {\r\n  let postsElements = props.posts.map((p) => (\r\n    <Post key={p.id} message={p.message} like={p.like} />\r\n  ));\r\n\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My post</h3>\r\n      <AddNewPostForm onSubmit={onAddPost} />\r\n      <div className={s.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nlet AddNewPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          className={s.textarea}\r\n          name=\"newPostText\"\r\n          component={Textarea}\r\n          placeholder={'Post message'}\r\n          validate={[required, maxLength10]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button className={s.button}>Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddNewPostForm = reduxForm({ form: 'ProfileAddNewPostForm' })(AddNewPostForm);\r\nexport default MyPosts;\r\n","import { connect } from 'react-redux';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText));\r\n    },\r\n  };\r\n};\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\nexport default MyPostsContainer;\r\n","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n// import { updateNewPostText } from '../../redux/store';\r\nconst Profile = (props) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        saveProfile={props.saveProfile}\r\n        savePhoto={props.savePhoto}\r\n        isOwner={props.isOwner}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport {\r\n  getStatus,\r\n  getUserProfile,\r\n  updateStatus,\r\n  savePhoto,\r\n  saveProfile,\r\n} from '../../redux/profile-reducer';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n  refreshProfile() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push('/login');\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Profile\r\n        isOwner={!this.props.match.params.userId}\r\n        {...this.props}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  authorizedUserId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n  }),\r\n  withRouter\r\n  // withAuthRedirect\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}